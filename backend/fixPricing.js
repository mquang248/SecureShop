const mongoose = require('mongoose');
require('dotenv').config();
const Product = require('./models/Product');

// K·∫øt n·ªëi MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/secure_shop', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const fixPricing = async () => {
  try {
    console.log('üîÑ ƒêang c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m...');

    // T√¨m s·∫£n ph·∫©m c√≥ gi√° th·∫•p (d∆∞·ªõi $10)
    const lowPriceProducts = await Product.find({
      price: { $lt: 10 }
    });

    console.log(`üì¶ T√¨m th·∫•y ${lowPriceProducts.length} s·∫£n ph·∫©m c√≥ gi√° th·∫•p.`);

    if (lowPriceProducts.length > 0) {
      // C·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m
      for (const product of lowPriceProducts) {
        // T·∫°o gi√° ng·∫´u nhi√™n t·ª´ $159 ƒë·∫øn $989.99
        const newPrice = Math.floor(Math.random() * (989.99 - 159 + 1)) + 159;
        const roundedPrice = Math.round(newPrice * 100) / 100; // L√†m tr√≤n 2 ch·ªØ s·ªë th·∫≠p ph√¢n
        
        // T·∫°o comparePrice cao h∆°n 10-30%
        const comparePrice = Math.round(roundedPrice * (1 + Math.random() * 0.3 + 0.1) * 100) / 100;
        
        // ƒê·∫∑t salePrice b·∫±ng price
        const salePrice = roundedPrice;

        await Product.findByIdAndUpdate(product._id, {
          price: roundedPrice,
          salePrice: salePrice,
          comparePrice: comparePrice
        });

        console.log(`‚úÖ C·∫≠p nh·∫≠t ${product.name}: $${product.price} ‚Üí $${roundedPrice}`);
      }

      console.log(`üéâ ƒê√£ c·∫≠p nh·∫≠t gi√° cho ${lowPriceProducts.length} s·∫£n ph·∫©m!`);
    } else {
      console.log('‚úÖ Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c·∫ßn c·∫≠p nh·∫≠t gi√°.');
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database.');
  }
};

fixPricing();
